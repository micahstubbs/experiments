#the goal of this script is to check the js implementation of Pearson's Correlation from here
# https://gist.github.com/matt-west/6500993
# against the implementation in R cor https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cor.html
# method: a character string indicating which correlation coefficient (or covariance) is to be computed. One of "pearson" (default),
panel.pearson <- function(x, y, ...) {
horizontal <- (par("usr")[1] + par("usr")[2]) / 2;
vertical <- (par("usr")[3] + par("usr")[4]) / 2;
text(horizontal, vertical, format(abs(cor(x,y)), digits=2))
}
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red","green3","blue")[unclass(iris$Species)], upper.panel=panel.pearson)
??diamonds
install.packages('ggplot2')
library('ggplot2')
diamonds
head(dimaonds)
head(diamonds)
??piars
??pairs
?pairs
paris(diamonds[,c(1, 4:10)], main = "ggplot2's Diamond Data", pch = 21, upper.panel=panel.pearson)
pairs(diamonds[,c(1, 4:10)], main = "ggplot2's Diamond Data", pch = 21, upper.panel=panel.pearson)
pairs(diamonds[,c(1, 5:10)], main = "ggplot2's Diamond Data", pch = 21, upper.panel=panel.pearson)
diamonds[2000]
diamonds[1:2000,]
diamondsSubset <- diamonds[1:2000,]
pairs(diamondsSubset[,c(1, 5:10)], main = "ggplot2's Diamond Data", pch = 21, upper.panel=panel.pearson)
write.csv(diamondsSubset, file = "~/workspace/experiments/pairs/09/source-data/diamonds-r-2000.csv", quote= TRUE)
diamondsSubset <- diamonds[1:1999,]
write.csv(diamondsSubset, file = "~/workspace/experiments/pairs/09/source-data/diamonds-r.csv", quote= TRUE)
pairs(diamondsSubset[,c(1, 5:10)], main = "ggplot2's Diamond Data", pch = 21, upper.panel=panel.pearson)
#the goal of this script is to check the js implementation of Pearson's Correlation from here
# https://gist.github.com/matt-west/6500993
# against the implementation in R cor https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cor.html
# method: a character string indicating which correlation coefficient (or covariance) is to be computed. One of "pearson" (default),
panel.pearson <- function(x, y, ...) {
horizontal <- (par("usr")[1] + par("usr")[2]) / 2;
vertical <- (par("usr")[3] + par("usr")[4]) / 2;
text(horizontal, vertical, format(abs(cor(x,y)), digits=2))
}
# first let's reproduce the example from here:
# http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/r/iris_plots/
pairs(iris[1:4], main = "Edgar Anderson's Iris Data", pch = 21, bg = c("red","green3","blue")[unclass(iris$Species)], upper.panel=panel.pearson)
# now let's plot it with the diamonds dataset
# we'll omit color for the points for now
diamondsSubset <- diamonds[1:1999,]
pairs(diamondsSubset[,c(1, 5:10)], main = "ggplot2's Diamond Data", pch = 21, upper.panel=panel.pearson)
install.packages('XLConnect')
R CMD javarconf
library(XLConnect)
install.packages('XLConnect')
install.packages('XLConnect')
install.packages('rJava')
install.packages("openxlsx", dependencies=TRUE)
library(openxlsx)
setwd('~/workspace/experiments/sample-data/austrian-city-regions/')
library(openxlsx)
xlsxFile <- "wohnbevoelkerung_1971_-_2009.xlsx"
df <- read.xlsx(xlsxFile, sheet = 1, startRow = 1, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
rows = NULL, cols = NULL, check.names = FALSE, namedRegion = NULL)
head(df)
df <- read.xlsx(xlsxFile, sheet = 1, startRow = 2, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
rows = NULL, cols = NULL, check.names = FALSE, namedRegion = NULL)
head(df)
df <- df[df$SR/KZ/AZ == "SR", ]
df <- df[df$"SR/KZ/AZ" == "SR", ]
head(df)
df <- df[df$"Größen-klasse" %in% c("W", "GS"), ]
head(df)
df
library(reshape)
install.packages(reshape)
install.packages('reshape')
install.packages('reshape2')
df$regionName <- df$name
head(df)
df$regionName <- df$Name
head(df)
df <- transform(df, FOO = colsplit(Name, pattern = "\s", names = c('a', 'b')))
df <- transform(df, FOO = colsplit(Name, pattern = "\\s", names = c('a', 'b')))
library(reshape2)
df <- transform(df, FOO = colsplit(Name, pattern = "\\s", names = c('a', 'b')))
head(df)
df <- transform(df, region = colsplit(Name, pattern = "\\s", names = c('type', 'city')))
head(df)
xlsxFile <- "wohnbevoelkerung_1971_-_2009.xlsx"
source_data <- read.xlsx(xlsxFile, sheet = 1, startRow = 2, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
rows = NULL, cols = NULL, check.names = FALSE, namedRegion = NULL)
head(source_data)
df <- source_data
# filter for only Stadtregion or City Region level figures
df <- df[df$"SR/KZ/AZ" == "SR", ]
# filter for only W = Large City Region Vienna, GS = Large City
df <- df[df$"Größen-klasse" %in% c("W", "GS"), ]
df <- transform(df, region = colsplit(Name, pattern = "\\s", names = c('type', 'city')))
head(df)
df <- subset(df, select=-c(ID,Name,"SR.KZ.AZ","Größen.klasse", "region.type"))
head(df)
df <- subset(df, select=-c("ID","Name","SR.KZ.AZ","Größen.klasse", "region.type"))
df <- subset(df, select=-c("ID","Name","SR.KZ.AZ","Größen.klasse","region.type"))
head(df)
df <- subset(df, select=-c("ID","Name","SR.KZ.AZ","Größen.klasse","region.type"))
df <- df[ , c("X1971", "X1981", "X1991", "X2001", "X2009", "region.city")]
head(df)
df <- df[ , c("region.city", "X1971", "X1981", "X1991", "X2001", "X2009")]
head(df)
names(df)[names(df)=="region.city"] <- "city"
names(df)[names(df)=="X1971"] <- "1971"
names(df)[names(df)=="X1981"] <- "1981"
names(df)[names(df)=="X1991"] <- "1991"
names(df)[names(df)=="X2001"] <- "2001"
names(df)[names(df)=="X2009"] <- "2009"
head(df)
install.packages(ggmap)
install.packages('ggmap')
library(ggmap)
head(df)
geocodes <- geocode(as.character(df$city))
df <- data.frame(df[,1:6],geocodes)
head(df)
# rename columns once more
names(df)[names(df)=="X1971"] <- "1971"
names(df)[names(df)=="X1981"] <- "1981"
names(df)[names(df)=="X1991"] <- "1991"
names(df)[names(df)=="X2001"] <- "2001"
names(df)[names(df)=="X2009"] <- "2009"
head(df)
library(jsonlite)
myjson <- toJSON(df, pretty=TRUE, digits=5)
cat(myjson)
write(myjson, "large-cities.json")
df <- melt(df, id.vars="city", measure.vars=c("1971", "1981", "1991", "2001", "2009"))
head(df)
df <- melt(df, id.vars=c("city","lat","lon"), measure.vars=c("1971", "1981", "1991", "2001", "2009"))
head(df)
setwd('~/workspace/experiments/sample-data/austrian-city-regions/')
library(openxlsx)
library(reshape2)
library(ggmap)
library(jsonlite)
xlsxFile <- "wohnbevoelkerung_1971_-_2009.xlsx"
source_data <- read.xlsx(xlsxFile, sheet = 1, startRow = 2, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
rows = NULL, cols = NULL, check.names = FALSE, namedRegion = NULL)
head(source_data)
df <- source_data
# filter for only Stadtregion or City Region level figures
df <- df[df$"SR/KZ/AZ" == "SR", ]
# filter for only W = Large City Region Vienna, GS = Large City
df <- df[df$"Größen-klasse" %in% c("W", "GS"), ]
df <- transform(df, region = colsplit(Name, pattern = "\\s", names = c('type', 'city')))
head(df)
# select only the columns we're interested in
df <- df[ , c("region.city", "X1971", "X1981", "X1991", "X2001", "X2009")]
head(df)
# rename columns
names(df)[names(df)=="region.city"] <- "city"
head(df)
# geocode the cities
geocodes <- geocode(as.character(df$city))
df <- data.frame(df[,1:6],geocodes)
head(df)
# rename columns once more
names(df)[names(df)=="X1971"] <- "1971"
names(df)[names(df)=="X1981"] <- "1981"
names(df)[names(df)=="X1991"] <- "1991"
names(df)[names(df)=="X2001"] <- "2001"
names(df)[names(df)=="X2009"] <- "2009"
head(df)
df <- melt(df, id.vars=c("city","lat","lon"), measure.vars=c("1971", "1981", "1991", "2001", "2009"))
head(df)
xlsxFile <- "wohnbevoelkerung_1971_-_2009.xlsx"
source_data <- read.xlsx(xlsxFile, sheet = 1, startRow = 2, colNames = TRUE,
rowNames = FALSE, detectDates = FALSE, skipEmptyRows = TRUE,
rows = NULL, cols = NULL, check.names = FALSE, namedRegion = NULL)
head(source_data)
df <- source_data
# filter for only Stadtregion or City Region level figures
df <- df[df$"SR/KZ/AZ" == "SR", ]
# filter for only W = Large City Region Vienna, GS = Large City
df <- df[df$"Größen-klasse" %in% c("W", "GS"), ]
df <- transform(df, region = colsplit(Name, pattern = "\\s", names = c('type', 'city')))
head(df)
# select only the columns we're interested in
df <- df[ , c("region.city", "X1971", "X1981", "X1991", "X2001", "X2009")]
head(df)
# rename columns
names(df)[names(df)=="region.city"] <- "city"
head(df)
# geocode the cities
geocodes <- geocode(as.character(df$city))
df <- data.frame(df[,1:6],geocodes)
head(df)
# rename columns once more
names(df)[names(df)=="X1971"] <- "1971"
names(df)[names(df)=="X1981"] <- "1981"
names(df)[names(df)=="X1991"] <- "1991"
names(df)[names(df)=="X2001"] <- "2001"
names(df)[names(df)=="X2009"] <- "2009"
head(df)
# melt
df <- melt(df, id.vars=c("city","lat","lon"), measure.vars=c("1971", "1981", "1991", "2001", "2009"), variable.name="year", value.name="population")
head(df)
# write out to json
myjson <- toJSON(df, pretty=TRUE, digits=5)
cat(myjson)
write(myjson, "large-cities.json")
